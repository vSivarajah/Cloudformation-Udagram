  Description:
    This yaml file represents a cloudformation template that contains the underlying server infrastructure that hosts the web app.
    This will contain a load balancer, auto scaling group with launch configuration, iam roles to access s3 content. 


  Parameters:
    EnvironmentName:
      Description: Udagram project 2020
      Type: String

    InstanceVMType:
      Description: Instancetype we use for our LaunchConfiguration. 
      Type: String

  Resources:

    IAMRoleS3Access:
      Type: AWS::IAM::Role
      Properties:
        Path: "/"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
            - sts:AssumeRole

    S3InstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - Ref: "IAMRoleS3Access"


    LBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow everything through port 80 to load balancer
        VpcId:
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebAppSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow everything through port 80 to load balancer
        VpcId:
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Port: 80
        Protocol: HTTP
        VpcId: 
          Fn::ImportValue: 
            !Sub "${EnvironmentName}-VPCID"


    WebAppLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udagram-vignesh-2020/frontend.zip .
            unzip -o frontend.zip 
            cd /var/www/html/frontend
            mv -f index.html ../
            
        ImageId: ami-003634241a8fcdec0
        IamInstanceProfile: !Ref S3InstanceProfile
        SecurityGroups:
        - Ref: WebAppSecurityGroup
        InstanceType: !Ref InstanceVMType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppAutoScalerGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: webapp-asg
        MinSize: "1"
        MaxSize: "2"
        DesiredCapacity: "2"
        HealthCheckGracePeriod: 300
        LaunchConfigurationName: !Ref WebAppLaunchConfiguration
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"         
        TargetGroupARNs:
        - Ref: WebAppTargetGroup

    WebAppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"
        SecurityGroups:
        - Ref: LBSecurityGroup

    WebAppListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLoadBalancer
        Port: '80'
        Protocol: HTTP

    WebAppListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref WebAppListener
          Priority: 1

    